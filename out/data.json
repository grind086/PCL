{
    "project": {},
    "files": {
        "src/core/BaseNode.js": {
            "name": "src/core/BaseNode.js",
            "modules": {},
            "classes": {
                "PCL.BaseNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/CombinerNode.js": {
            "name": "src/core/CombinerNode.js",
            "modules": {},
            "classes": {
                "PCL.CombinerNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/GeneratorNode.js": {
            "name": "src/core/GeneratorNode.js",
            "modules": {},
            "classes": {
                "PCL.GeneratorNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ModifierNode.js": {
            "name": "src/core/ModifierNode.js",
            "modules": {},
            "classes": {
                "PCL.ModifierNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/SelectorNode.js": {
            "name": "src/core/SelectorNode.js",
            "modules": {},
            "classes": {
                "PCL.SelectorNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/combiners/AddNode.js": {
            "name": "src/extras/combiners/AddNode.js",
            "modules": {},
            "classes": {
                "PCL.AddNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/combiners/DivideNode.js": {
            "name": "src/extras/combiners/DivideNode.js",
            "modules": {},
            "classes": {
                "PCL.DivideNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/combiners/MaxNode.js": {
            "name": "src/extras/combiners/MaxNode.js",
            "modules": {},
            "classes": {
                "PCL.MaxNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/combiners/MinNode.js": {
            "name": "src/extras/combiners/MinNode.js",
            "modules": {},
            "classes": {
                "PCL.MinNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/combiners/MultiplyNode.js": {
            "name": "src/extras/combiners/MultiplyNode.js",
            "modules": {},
            "classes": {
                "PCL.MultiplyNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/combiners/PowerNode.js": {
            "name": "src/extras/combiners/PowerNode.js",
            "modules": {},
            "classes": {
                "PCL.PowerNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/combiners/SubtractNode.js": {
            "name": "src/extras/combiners/SubtractNode.js",
            "modules": {},
            "classes": {
                "PCL.SubtractNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/generators/ArgumentNode.js": {
            "name": "src/extras/generators/ArgumentNode.js",
            "modules": {},
            "classes": {
                "PCL.ArgumentNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/generators/ConstantNode.js": {
            "name": "src/extras/generators/ConstantNode.js",
            "modules": {},
            "classes": {
                "PCL.ConstantNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/modifiers/AbsNode.js": {
            "name": "src/extras/modifiers/AbsNode.js",
            "modules": {},
            "classes": {
                "PCL.AbsNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/modifiers/ClampNode.js": {
            "name": "src/extras/modifiers/ClampNode.js",
            "modules": {},
            "classes": {
                "PCL.ClampNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/modifiers/CurveNode.js": {
            "name": "src/extras/modifiers/CurveNode.js",
            "modules": {},
            "classes": {
                "PCL.CurveNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/modifiers/InvertNode.js": {
            "name": "src/extras/modifiers/InvertNode.js",
            "modules": {},
            "classes": {
                "PCL.InvertNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/modifiers/ScaleBiasNode.js": {
            "name": "src/extras/modifiers/ScaleBiasNode.js",
            "modules": {},
            "classes": {
                "PCL.ScaleBiasNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/modifiers/TerraceNode.js": {
            "name": "src/extras/modifiers/TerraceNode.js",
            "modules": {},
            "classes": {
                "PCL.TerraceNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/selectors/BlendNode.js": {
            "name": "src/extras/selectors/BlendNode.js",
            "modules": {},
            "classes": {
                "PCL.BlendNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/extras/selectors/SelectNode.js": {
            "name": "src/extras/selectors/SelectNode.js",
            "modules": {},
            "classes": {
                "PCL.SelectNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/PCL.js": {
            "name": "src/PCL.js",
            "modules": {
                "PCL": 1
            },
            "classes": {
                "PCL": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "PCL": {
            "name": "PCL",
            "submodules": {},
            "classes": {
                "PCL.BaseNode": 1,
                "PCL.CombinerNode": 1,
                "PCL.GeneratorNode": 1,
                "PCL.ModifierNode": 1,
                "PCL.SelectorNode": 1,
                "PCL.AddNode": 1,
                "PCL.DivideNode": 1,
                "PCL.MaxNode": 1,
                "PCL.MinNode": 1,
                "PCL.MultiplyNode": 1,
                "PCL.PowerNode": 1,
                "PCL.SubtractNode": 1,
                "PCL.ArgumentNode": 1,
                "PCL.ConstantNode": 1,
                "PCL.AbsNode": 1,
                "PCL.ClampNode": 1,
                "PCL.CurveNode": 1,
                "PCL.InvertNode": 1,
                "PCL.ScaleBiasNode": 1,
                "PCL.TerraceNode": 1,
                "PCL.BlendNode": 1,
                "PCL.SelectNode": 1,
                "PCL": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/PCL.js",
            "line": 49,
            "description": "Node-based procedural noise library with utilities for turning that\nnoise into useful data structures, such as textures. Based on the C++\nlibrary `libnoise` by Jason Bevins (http://libnoise.sourceforge.net/index.html).\n\nNodes are broken down into four different categories:\n{{#crossLink \"PCL.GeneratorNode\"}}Generators{{/crossLink}},\n{{#crossLink \"PCL.ModifierNode\"}}Modifiers{{/crossLink}},\n{{#crossLink \"PCL.CombinerNode\"}}Combiners{{/crossLink}},\nand {{#crossLink \"PCL.SelectorNode\"}}Selectors{{/crossLink}}.\n\n__Generators__  \nGenerators have no inputs, and one output. They provide the base values for the \nrest of the node chain.\n\n- {{#crossLink \"PCL.ArgumentNode\"}}ArgumentNode{{/crossLink}}\n- {{#crossLink \"PCL.ConstantNode\"}}ConstantNode{{/crossLink}}\n\n__Modifiers__  \nModifiers have one input, and one output.\n\n- {{#crossLink \"PCL.AbsNode\"}}AbsNode{{/crossLink}}\n- {{#crossLink \"PCL.ClampNode\"}}ClampNode{{/crossLink}}\n- {{#crossLink \"PCL.CurveNode\"}}CurveNode{{/crossLink}}\n- {{#crossLink \"PCL.InvertNode\"}}InvertNode{{/crossLink}}\n- {{#crossLink \"PCL.ScaleBiasNode\"}}ScaleBiasNode{{/crossLink}}\n- {{#crossLink \"PCL.TerraceNode\"}}TerraceNode{{/crossLink}}\n\n__Combiners__  \nCombiners have two inputs, and one output.\n\n- {{#crossLink \"PCL.AddNode\"}}AddNode{{/crossLink}}\n- {{#crossLink \"PCL.DivideNode\"}}DivideNode{{/crossLink}}\n- {{#crossLink \"PCL.MaxNode\"}}MaxNode{{/crossLink}}\n- {{#crossLink \"PCL.MinNode\"}}MinNode{{/crossLink}}\n- {{#crossLink \"PCL.MultiplyNode\"}}MultiplyNode{{/crossLink}}\n- {{#crossLink \"PCL.PowerNode\"}}PowerNode{{/crossLink}}\n- {{#crossLink \"PCL.SubtractNode\"}}SubtractNode{{/crossLink}}\n\n__Selectors__  \nSelectors have three inputs, and one output.\n\n- {{#crossLink \"PCL.BlendNode\"}}BlendNode{{/crossLink}}\n- {{#crossLink \"PCL.SelectNode\"}}SelectNode{{/crossLink}}"
        }
    },
    "classes": {
        "PCL.BaseNode": {
            "name": "PCL.BaseNode",
            "shortname": "PCL.BaseNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/core/BaseNode.js",
            "line": 1,
            "description": "The base class for all noise nodes.",
            "is_constructor": 1
        },
        "PCL.CombinerNode": {
            "name": "PCL.CombinerNode",
            "shortname": "PCL.CombinerNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/core/CombinerNode.js",
            "line": 1,
            "description": "Takes two inputs and combines them into a single output.",
            "is_constructor": 1,
            "extends": "PCL.BaseNode"
        },
        "PCL.GeneratorNode": {
            "name": "PCL.GeneratorNode",
            "shortname": "PCL.GeneratorNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/core/GeneratorNode.js",
            "line": 1,
            "is_constructor": 1,
            "extends": "PCL.BaseNode"
        },
        "PCL.ModifierNode": {
            "name": "PCL.ModifierNode",
            "shortname": "PCL.ModifierNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/core/ModifierNode.js",
            "line": 1,
            "description": "Takes one input, and performs some operation on it.",
            "is_constructor": 1,
            "extends": "PCL.BaseNode"
        },
        "PCL.SelectorNode": {
            "name": "PCL.SelectorNode",
            "shortname": "PCL.SelectorNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/core/SelectorNode.js",
            "line": 1,
            "description": "Takes three inputs. The first two are the inputs to choose between, and the\nthird controls which is used.",
            "is_constructor": 1,
            "extends": "PCL.BaseNode"
        },
        "PCL.AddNode": {
            "name": "PCL.AddNode",
            "shortname": "PCL.AddNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/combiners/AddNode.js",
            "line": 1,
            "description": "Sums the values of the inputs.",
            "is_constructor": 1,
            "extends": "PCL.CombinerNode"
        },
        "PCL.DivideNode": {
            "name": "PCL.DivideNode",
            "shortname": "PCL.DivideNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/combiners/DivideNode.js",
            "line": 1,
            "description": "Divides the first input by the second.",
            "is_constructor": 1,
            "extends": "PCL.CombinerNode"
        },
        "PCL.MaxNode": {
            "name": "PCL.MaxNode",
            "shortname": "PCL.MaxNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/combiners/MaxNode.js",
            "line": 1,
            "description": "Returns the larger of the two inputs.",
            "is_constructor": 1,
            "extends": "PCL.CombinerNode"
        },
        "PCL.MinNode": {
            "name": "PCL.MinNode",
            "shortname": "PCL.MinNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/combiners/MinNode.js",
            "line": 1,
            "description": "Returns the smaller of the two inputs.",
            "is_constructor": 1,
            "extends": "PCL.CombinerNode"
        },
        "PCL.MultiplyNode": {
            "name": "PCL.MultiplyNode",
            "shortname": "PCL.MultiplyNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/combiners/MultiplyNode.js",
            "line": 1,
            "description": "Multiplies the first input by the second.",
            "is_constructor": 1,
            "extends": "PCL.CombinerNode"
        },
        "PCL.PowerNode": {
            "name": "PCL.PowerNode",
            "shortname": "PCL.PowerNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/combiners/PowerNode.js",
            "line": 1,
            "description": "Raises the first input to the power of the second.",
            "is_constructor": 1,
            "extends": "PCL.CombinerNode"
        },
        "PCL.SubtractNode": {
            "name": "PCL.SubtractNode",
            "shortname": "PCL.SubtractNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/combiners/SubtractNode.js",
            "line": 1,
            "description": "Subtracts the second input from the first.",
            "is_constructor": 1,
            "extends": "PCL.CombinerNode"
        },
        "PCL.ArgumentNode": {
            "name": "PCL.ArgumentNode",
            "shortname": "PCL.ArgumentNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/generators/ArgumentNode.js",
            "line": 1,
            "description": "Returns the value of the first argument passed to the top-level\n`getValue`. Useful for debugging purposes.",
            "is_constructor": 1,
            "extends": "PCL.GeneratorNode"
        },
        "PCL.ConstantNode": {
            "name": "PCL.ConstantNode",
            "shortname": "PCL.ConstantNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/generators/ConstantNode.js",
            "line": 1,
            "description": "Returns the value stored in its `ConstantNode.value` property.",
            "is_constructor": 1,
            "extends": "PCL.GeneratorNode"
        },
        "PCL.AbsNode": {
            "name": "PCL.AbsNode",
            "shortname": "PCL.AbsNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/modifiers/AbsNode.js",
            "line": 1,
            "description": "Returns the absolute value of the input node.",
            "is_constructor": 1,
            "extends": "PCL.ModifierNode"
        },
        "PCL.ClampNode": {
            "name": "PCL.ClampNode",
            "shortname": "PCL.ClampNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/modifiers/ClampNode.js",
            "line": 1,
            "description": "Clamps the value of the input node between `ClampNode.min` and `ClampNode.max`.",
            "is_constructor": 1,
            "extends": "PCL.ModifierNode"
        },
        "PCL.CurveNode": {
            "name": "PCL.CurveNode",
            "shortname": "PCL.CurveNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/modifiers/CurveNode.js",
            "line": 1,
            "description": "Maps an input to a curve defined by the given control points. Uses cubic\ninterpolation between control points to approximate the unique polynomial\nthrough those points. See \nhttp://libnoise.sourceforge.net/docs/classnoise_1_1module_1_1Curve.html#_details\nfor examples (todo: make our own examples).\n\nBased on Jason Bevin's Curve module from libnoise.",
            "is_constructor": 1,
            "extends": "PCL.ModifierNode"
        },
        "PCL.InvertNode": {
            "name": "PCL.InvertNode",
            "shortname": "PCL.InvertNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/modifiers/InvertNode.js",
            "line": 1,
            "description": "Inverts the value of the input node.",
            "is_constructor": 1,
            "extends": "PCL.ModifierNode"
        },
        "PCL.ScaleBiasNode": {
            "name": "PCL.ScaleBiasNode",
            "shortname": "PCL.ScaleBiasNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/modifiers/ScaleBiasNode.js",
            "line": 1,
            "description": "Scales the value of the input node, then adds a bias to it.",
            "is_constructor": 1,
            "extends": "PCL.ModifierNode"
        },
        "PCL.TerraceNode": {
            "name": "PCL.TerraceNode",
            "shortname": "PCL.TerraceNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 1,
            "description": "Maps an input to a curve defined by the given control points. Creates a\nterracing effect. See http://libnoise.sourceforge.net/docs/classnoise_1_1module_1_1Terrace.html#_details\nfor examples (todo: make our own examples).\n\nBased on Jason Bevin's Terrace module from libnoise.",
            "is_constructor": 1,
            "extends": "PCL.ModifierNode"
        },
        "PCL.BlendNode": {
            "name": "PCL.BlendNode",
            "shortname": "PCL.BlendNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/selectors/BlendNode.js",
            "line": 1,
            "description": "Outputs a weighted combination of `input[0]` and `input[1]` depending on the value\nof `input[2]`. `input[2]` is assumed to have a range [-1, 1].",
            "is_constructor": 1,
            "extends": "PCL.BlendorNode"
        },
        "PCL.SelectNode": {
            "name": "PCL.SelectNode",
            "shortname": "PCL.SelectNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "file": "src/extras/selectors/SelectNode.js",
            "line": 1,
            "description": "Outputs either `input[0]` or `input[1]` depending on the value of `input[2]`.",
            "is_constructor": 1,
            "extends": "PCL.SelectorNode"
        },
        "PCL": {
            "name": "PCL",
            "shortname": "PCL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PCL",
            "namespace": "",
            "file": "src/PCL.js",
            "line": 49,
            "description": "The base static class to which PCL's classes are attached.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/core/BaseNode.js",
            "line": 10,
            "description": "UUID for this node instance",
            "itemtype": "property",
            "name": "id",
            "type": "string",
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 18,
            "description": "The type of node (ex. BaseNode, GeneratorNode, ModifierNode, etc.)",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "BaseNode",
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 27,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 35,
            "description": "Number of inputs to this node",
            "itemtype": "property",
            "name": "inputs",
            "type": "number",
            "default": "0",
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 44,
            "description": "Array containing attached inputs",
            "itemtype": "property",
            "name": "inputNodes",
            "type": "Array<PCL.BaseNode>",
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 52,
            "description": "The node this one outputs into",
            "itemtype": "property",
            "name": "parent",
            "type": "PCL.BaseNode",
            "default": "null",
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 65,
            "description": "Returns input node at index `i`",
            "itemtype": "method",
            "name": "getInput",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the node to retrieve",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "PCL.BaseNode"
            },
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 83,
            "description": "Sets the input node at index `i` to `node`",
            "itemtype": "method",
            "name": "setInput",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the node to set",
                    "type": "Number"
                },
                {
                    "name": "node",
                    "description": "The new input node",
                    "type": "PCL.BaseNode"
                }
            ],
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 111,
            "description": "Removes the input node at index `i`",
            "itemtype": "method",
            "name": "unsetInput",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the node to unset",
                    "type": "Number"
                }
            ],
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 126,
            "description": "Removes `node` from the input list",
            "itemtype": "method",
            "name": "removeInput",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the node to unset",
                    "type": "Number"
                }
            ],
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 143,
            "description": "Returns an array of input node values (indexed the same as the\nactual input nodes)",
            "itemtype": "method",
            "name": "getInputValues",
            "params": [
                {
                    "name": "args",
                    "description": "Arguments to be passed through the node \n   chain (ex. x, y coordinates)",
                    "type": "Array<Any>"
                }
            ],
            "return": {
                "description": "Values of the input nodes",
                "type": "Array<Number>"
            },
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/BaseNode.js",
            "line": 165,
            "description": "Calculate the value of this node. Should call `getInputValues` and\nuse the results (with the exception of generators).",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "The value of the node chain for the given arguments.",
                "type": "Number"
            },
            "class": "PCL.BaseNode"
        },
        {
            "file": "src/core/CombinerNode.js",
            "line": 13,
            "description": "The type of node (ex. BaseNode, GeneratorNode, ModifierNode, etc.)",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "CombinerNode",
            "class": "PCL.CombinerNode"
        },
        {
            "file": "src/core/CombinerNode.js",
            "line": 22,
            "description": "Number of inputs to this node",
            "itemtype": "property",
            "name": "inputs",
            "type": "number",
            "default": "2",
            "class": "PCL.CombinerNode"
        },
        {
            "file": "src/core/GeneratorNode.js",
            "line": 11,
            "description": "The type of node (ex. BaseNode, GeneratorNode, ModifierNode, etc.)",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "GeneratorNode",
            "class": "PCL.GeneratorNode"
        },
        {
            "file": "src/core/ModifierNode.js",
            "line": 13,
            "description": "The type of node (ex. BaseNode, GeneratorNode, ModifierNode, etc.)",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "ModifierNode",
            "class": "PCL.ModifierNode"
        },
        {
            "file": "src/core/ModifierNode.js",
            "line": 22,
            "description": "Number of inputs to this node",
            "itemtype": "property",
            "name": "inputs",
            "type": "number",
            "default": "1",
            "class": "PCL.ModifierNode"
        },
        {
            "file": "src/core/SelectorNode.js",
            "line": 14,
            "description": "The type of node (ex. BaseNode, GeneratorNode, ModifierNode, etc.)",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "SelectorNode",
            "class": "PCL.SelectorNode"
        },
        {
            "file": "src/core/SelectorNode.js",
            "line": 23,
            "description": "Number of inputs to this node",
            "itemtype": "property",
            "name": "inputs",
            "type": "number",
            "default": "3",
            "class": "PCL.SelectorNode"
        },
        {
            "file": "src/extras/combiners/AddNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "AddNode",
            "class": "PCL.AddNode"
        },
        {
            "file": "src/extras/combiners/AddNode.js",
            "line": 26,
            "description": "Performs `input[0] + input[1]`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.AddNode"
        },
        {
            "file": "src/extras/combiners/DivideNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "DivideNode",
            "class": "PCL.DivideNode"
        },
        {
            "file": "src/extras/combiners/DivideNode.js",
            "line": 26,
            "description": "Performs `input[0] / input[1]`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.DivideNode"
        },
        {
            "file": "src/extras/combiners/MaxNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "MaxNode",
            "class": "PCL.MaxNode"
        },
        {
            "file": "src/extras/combiners/MaxNode.js",
            "line": 26,
            "description": "Performs `Math.max( input[0], input[1] )`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.MaxNode"
        },
        {
            "file": "src/extras/combiners/MinNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "MinNode",
            "class": "PCL.MinNode"
        },
        {
            "file": "src/extras/combiners/MinNode.js",
            "line": 26,
            "description": "Performs `Math.min( input[0], input[1] )`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.MinNode"
        },
        {
            "file": "src/extras/combiners/MultiplyNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "MultiplyNode",
            "class": "PCL.MultiplyNode"
        },
        {
            "file": "src/extras/combiners/MultiplyNode.js",
            "line": 26,
            "description": "Performs `input[0] * input[1]`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.MultiplyNode"
        },
        {
            "file": "src/extras/combiners/PowerNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "PowerNode",
            "class": "PCL.PowerNode"
        },
        {
            "file": "src/extras/combiners/PowerNode.js",
            "line": 26,
            "description": "Performs `Math.pow( input[0], input[1] )`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.PowerNode"
        },
        {
            "file": "src/extras/combiners/SubtractNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "SubtractNode",
            "class": "PCL.SubtractNode"
        },
        {
            "file": "src/extras/combiners/SubtractNode.js",
            "line": 26,
            "description": "Performs `input[0] - input[1]`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.SubtractNode"
        },
        {
            "file": "src/extras/generators/ArgumentNode.js",
            "line": 13,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "ArgumentNode",
            "class": "PCL.ArgumentNode"
        },
        {
            "file": "src/extras/generators/ArgumentNode.js",
            "line": 27,
            "description": "Returns the value of the first argument.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "value",
                    "description": "The value to be returned by this 'generator'.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "`value`",
                "type": "Number"
            },
            "class": "PCL.ArgumentNode"
        },
        {
            "file": "src/extras/generators/ConstantNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "ConstantNode",
            "class": "PCL.ConstantNode"
        },
        {
            "file": "src/extras/generators/ConstantNode.js",
            "line": 21,
            "description": "The value to be returned by this node.",
            "itemtype": "property",
            "name": "value",
            "type": "number",
            "default": "0",
            "class": "PCL.ConstantNode"
        },
        {
            "file": "src/extras/generators/ConstantNode.js",
            "line": 35,
            "description": "Returns the value of `ConstantNode.value`.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "`value`",
                "type": "Number"
            },
            "class": "PCL.ConstantNode"
        },
        {
            "file": "src/extras/modifiers/AbsNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "AbsNode",
            "class": "PCL.AbsNode"
        },
        {
            "file": "src/extras/modifiers/AbsNode.js",
            "line": 26,
            "description": "Performs `Math.abs( input[0] )`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.AbsNode"
        },
        {
            "file": "src/extras/modifiers/ClampNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "ClampNode",
            "class": "PCL.ClampNode"
        },
        {
            "file": "src/extras/modifiers/ClampNode.js",
            "line": 21,
            "description": "The minimum value to be returned by this node.",
            "itemtype": "property",
            "name": "min",
            "type": "number",
            "default": "-1",
            "class": "PCL.ClampNode"
        },
        {
            "file": "src/extras/modifiers/ClampNode.js",
            "line": 30,
            "description": "The maximum value to be returned by this node.",
            "itemtype": "property",
            "name": "max",
            "type": "number",
            "default": "1",
            "class": "PCL.ClampNode"
        },
        {
            "file": "src/extras/modifiers/ClampNode.js",
            "line": 44,
            "description": "Performs `PCL.Math.clamp( input[0], ClampNode.min, ClampNode.max )`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.ClampNode"
        },
        {
            "file": "src/extras/modifiers/CurveNode.js",
            "line": 18,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "CurveNode",
            "class": "PCL.CurveNode"
        },
        {
            "file": "src/extras/modifiers/CurveNode.js",
            "line": 27,
            "description": "The list of control points in the form of `[ input, output ]`.",
            "itemtype": "property",
            "name": "controlPoints",
            "type": "Array<Array<number>>",
            "default": "[]",
            "class": "PCL.CurveNode"
        },
        {
            "file": "src/extras/modifiers/CurveNode.js",
            "line": 41,
            "description": "Adds a control point to the array such that when given `input` this\nnode will produce `output`.",
            "itemtype": "method",
            "name": "addControlPoint",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "output",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "PCL.CurveNode"
        },
        {
            "file": "src/extras/modifiers/CurveNode.js",
            "line": 61,
            "description": "Clears the control point array",
            "itemtype": "method",
            "name": "clearControlPoints",
            "class": "PCL.CurveNode"
        },
        {
            "file": "src/extras/modifiers/CurveNode.js",
            "line": 72,
            "description": "Makes evenly spaced control points on the domain [-1, 1] for the given \narray of output values. Requires at least 2 points.",
            "itemtype": "method",
            "name": "makeControlPoints",
            "params": [
                {
                    "name": "pointArray",
                    "description": "",
                    "type": "Array<number>"
                }
            ],
            "class": "PCL.CurveNode"
        },
        {
            "file": "src/extras/modifiers/CurveNode.js",
            "line": 99,
            "description": "Maps the input node's value to a curve through the given control points.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.CurveNode"
        },
        {
            "file": "src/extras/modifiers/InvertNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "InvertNode",
            "class": "PCL.InvertNode"
        },
        {
            "file": "src/extras/modifiers/InvertNode.js",
            "line": 26,
            "description": "Performs `-1 * input[0]`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.InvertNode"
        },
        {
            "file": "src/extras/modifiers/ScaleBiasNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "ScaleBiasNode",
            "class": "PCL.ScaleBiasNode"
        },
        {
            "file": "src/extras/modifiers/ScaleBiasNode.js",
            "line": 21,
            "description": "The amount to scale the input value by.",
            "itemtype": "property",
            "name": "scale",
            "type": "number",
            "default": "1",
            "class": "PCL.ScaleBiasNode"
        },
        {
            "file": "src/extras/modifiers/ScaleBiasNode.js",
            "line": 30,
            "description": "The amount to bias the input value by.",
            "itemtype": "property",
            "name": "bias",
            "type": "number",
            "default": "0",
            "class": "PCL.ScaleBiasNode"
        },
        {
            "file": "src/extras/modifiers/ScaleBiasNode.js",
            "line": 44,
            "description": "Performs `input[0] * ScaleBiasNode.scale + ScaleBiasNode.bias`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.ScaleBiasNode"
        },
        {
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 16,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "TerraceNode",
            "class": "PCL.TerraceNode"
        },
        {
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 25,
            "description": "The list of control points.",
            "itemtype": "property",
            "name": "controlPoints",
            "type": "Array<number>",
            "default": "[]",
            "class": "PCL.TerraceNode"
        },
        {
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 34,
            "description": "Whether the curve direction on control points should be inverted or not\n(ie curving down instead of up between points).",
            "itemtype": "property",
            "name": "invert",
            "type": "boolean",
            "default": "false",
            "class": "PCL.TerraceNode"
        },
        {
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 49,
            "description": "Adds a control point to the array such that the slope of the output curve\nwill peak to the left of the point, and be 0 immediately after.",
            "itemtype": "method",
            "name": "addControlPoint",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "PCL.TerraceNode"
        },
        {
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 68,
            "description": "Clears the control point array",
            "itemtype": "method",
            "name": "clearControlPoints",
            "class": "PCL.TerraceNode"
        },
        {
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 79,
            "description": "Makes the given number of evenly spaced control points on the domain \n[-1, 1]. Requires at least 2 points.",
            "itemtype": "method",
            "name": "makeControlPoints",
            "params": [
                {
                    "name": "pointCount",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "PCL.TerraceNode"
        },
        {
            "file": "src/extras/modifiers/TerraceNode.js",
            "line": 106,
            "description": "Maps the input node's value to a terracing curve through the given control \npoints.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.TerraceNode"
        },
        {
            "file": "src/extras/selectors/BlendNode.js",
            "line": 13,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "BlendNode",
            "class": "PCL.BlendNode"
        },
        {
            "file": "src/extras/selectors/BlendNode.js",
            "line": 27,
            "description": "Outputs `input[0]` if `input[2] < BlendNode.threshold` else `input[1]`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.BlendNode"
        },
        {
            "file": "src/extras/selectors/SelectNode.js",
            "line": 12,
            "description": "The specific variety of node (ex. AddNode, PerlinNode, AbsNode, etc.)",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "SelectNode",
            "class": "PCL.SelectNode"
        },
        {
            "file": "src/extras/selectors/SelectNode.js",
            "line": 21,
            "description": "For `input[2] < SelectNode.threshold` this node will output `input[0]`.\nOtherwise it will output `input[1]`.",
            "itemtype": "property",
            "name": "threshold",
            "type": "number",
            "default": "0",
            "class": "PCL.SelectNode"
        },
        {
            "file": "src/extras/selectors/SelectNode.js",
            "line": 36,
            "description": "Outputs `input[0]` if `input[2] < SelectNode.threshold` else `input[1]`.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "arguments",
                    "description": "Arguments to be passed up the node chain.\n   Typically numbers.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PCL.SelectNode"
        },
        {
            "file": "src/PCL.js",
            "line": 58,
            "description": "The current PCL version",
            "itemtype": "property",
            "name": "VERSION",
            "type": "string",
            "readonly": "",
            "static": 1,
            "class": "PCL",
            "module": "PCL"
        },
        {
            "file": "src/PCL.js",
            "line": 70,
            "description": "Information-level logging. By default simply binds `console.log`.",
            "itemtype": "method",
            "name": "log",
            "static": 1,
            "class": "PCL",
            "module": "PCL"
        },
        {
            "file": "src/PCL.js",
            "line": 79,
            "description": "Warning-level logging. By default simply binds `console.warn`.",
            "itemtype": "method",
            "name": "warn",
            "static": 1,
            "class": "PCL",
            "module": "PCL"
        },
        {
            "file": "src/PCL.js",
            "line": 88,
            "description": "Error-level logging. By default simply binds `console.error`.",
            "itemtype": "method",
            "name": "error",
            "static": 1,
            "class": "PCL",
            "module": "PCL"
        }
    ],
    "warnings": []
}